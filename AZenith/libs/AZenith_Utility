#!/bin/sh

MODDIR=${0%/*}
logpath="/data/AZenith/AZenith.log"

AZLog() {
    if [ "$(cat /data/AZenith/logger)" = "1" ]; then
        local timestamp
        timestamp=$(date +'%Y-%m-%d %H:%M:%S')
        local message="$1"
        echo "$timestamp - $message" >> "$logpath"
        echo "$timestamp - $message"
    fi
}

zeshia() {
    if [ -f "$2" ]; then
        chmod 644 "$2"
        echo "$1" >"$2" && AZLog "Set $2 to $1" || AZLog "Failed to set $2 to $1"
        chmod 444 "$2"
    else
        AZLog "File $2 not found, skipping..."
    fi
}

# Define important variables
lib="UnityMain, libunity.so, libil2ccp.so, libmain.so"

# Save EEM values
for eem in EEM_DET_B EEM_DET_BL EEM_DET_L EEM_DET_CCI; do
    eem_path="/proc/eem/$eem/eem_offset"
    eem_save_path="/data/AZenith/default_$eem"

    if [ -f "$eem_path" ]; then
        eem_value=$(cat "$eem_path")
        echo "$eem_value" > "$eem_save_path"
        AZLog "Saved $eem value: $eem_value"
    else
        AZLog "$eem_path not found, skipping..."
    fi
done

# GED parameters
ged_params="ged_smart_boost 1
boost_upper_bound 100
enable_gpu_boost 1
enable_cpu_boost 1
ged_boost_enable 1
boost_gpu_enable 1
gpu_dvfs_enable 1
gx_frc_mode 1
gx_dfps 1
gx_force_cpu_boost 1
gx_boost_on 1
gx_game_mode 1
gx_3D_benchmark_on 1
gpu_loading 0
cpu_boost_policy 1
boost_extra 1
is_GED_KPI_enabled 0"

zeshia "$ged_params" | while read -r param value; do
    zeshia "$value" "/sys/module/ged/parameters/$param"
done

# Save EEMG values
for eemg in EEMG_DET_GPU EEMG_DET_GPU_HI; do
    eemg_path="/proc/eemg/$eemg/eemg_offset"
    eemg_save_path="/data/AZenith/default_$eemg"

    if [ -f "$eemg_path" ]; then
        eemg_value=$(cat "$eemg_path")
        echo "$eemg_value" > "$eemg_save_path"
        AZLog "Saved $eemg value: $eemg_value"
    else
        AZLog "$eemg_path not found, skipping..."
    fi
done

# Tweaking scheduler to reduce latency
	zeshia 50000 /proc/sys/kernel/sched_migration_cost_ns
	zeshia 1000000 /proc/sys/kernel/sched_min_granularity_ns
	zeshia 1500000 /proc/sys/kernel/sched_wakeup_granularity_ns

	# Disable read-ahead for swap devices
	zeshia 0 /proc/sys/vm/page-cluster

	# Update /proc/stat less often to reduce jitter
	zeshia 120 /proc/sys/vm/stat_interval

	# Disable compaction_proactiveness
	zeshia 0 /proc/sys/vm/compaction_proactiveness

	# Report max CPU capabilities to these libraries
	zeshia "libunity.so, libil2cpp.so, libmain.so, libUE4.so, libgodot_android.so, libgdx.so, libgdx-box2d.so, libminecraftpe.so, libLive2DCubismCore.so, libyuzu-android.so, libryujinx.so, libcitra-android.so, libhdr_pro_engine.so, libandroidx.graphics.path.so, libeffect.so" /proc/sys/kernel/sched_lib_name
	zeshia 255 /proc/sys/kernel/sched_lib_mask_force
	
# CPU Core Ctl 
for cpu in 0 4 7; do
    zeshia "1" "/sys/devices/system/cpu/cpu$cpu/core_ctl/enable"
    zeshia "10" "/sys/devices/system/cpu/cpu$cpu/core_ctl/offline_throttle_ms"
done

# Schedhorizon Tunes
AZLog "Applying Schedhorizon Tunes..."
zeshia "50 100 200 400 600" "/sys/devices/system/cpu/cpufreq/policy0/schedhorizon/up_delay"
zeshia "500000 850000 1250000 1450000 1800000" "/sys/devices/system/cpu/cpufreq/policy0/schedhorizon/efficient_freq"
zeshia "50 100 200 400 600 800" "/sys/devices/system/cpu/cpufreq/policy4/schedhorizon/up_delay"
zeshia "437000 902000 1162000 1451000 1740000 1985000" "/sys/devices/system/cpu/cpufreq/policy4/schedhorizon/efficient_freq"
zeshia "30 50 150 300 500 700" "/sys/devices/system/cpu/cpufreq/policy7/schedhorizon/up_delay"
zeshia "480000 1200000 1600000 1800000 2200000 2400000" "/sys/devices/system/cpu/cpufreq/policy7/schedhorizon/efficient_freq"

# Memory optimizations
zeshia 20 /proc/sys/vm/swappiness

# Block I/O optimizations with reduced redundant operations
for block in mmcblk0 mmcblk1 sda sdb sdc; do
    for param in add_random iostats nomerges rotational rq_affinity; do
        zeshia "0" "/sys/block/$block/queue/$param"
    done
    zeshia "64" "/sys/block/$block/queue/nr_requests"
    zeshia "128" "/sys/block/$block/queue/read_ahead_kb"
done

# Network settings with logging
zeshia "cubic" /proc/sys/net/ipv4/tcp_congestion_control
zeshia 1 /proc/sys/net/ipv4/tcp_low_latency

# Virtual memory settings
echo 35 > /proc/sys/vm/dirty_background_ratio
echo 30 > /proc/sys/vm/dirty_ratio
echo 120 > /proc/sys/vm/vfs_cache_pressure
echo 400 > /proc/sys/vm/dirty_expire_centisecs
echo 6000 > /proc/sys/vm/dirty_writeback_centisecs
echo 0 > /proc/sys/vm/oom_dump_tasks
echo 0 > /proc/sys/vm/page-cluster
echo 0 > /proc/sys/vm/block_dump
echo 10 > /proc/sys/vm/stat_interval
echo 1 > /proc/sys/vm/compaction_proactiveness
echo 1 > /proc/sys/vm/watermark_boost_factor
echo 50 > /proc/sys/vm/watermark_scale_factor
echo 2 > /proc/sys/vm/drop_caches
echo 50 > /proc/sys/vm/swappiness

for cs in /dev/cpuset
do
    echo 0-7 > "$cs/cpus"
    echo 0-5 > "$cs/background/cpus"
    echo 0-4 > "$cs/system-background/cpus"
    echo 0-7 > "$cs/foreground/cpus"
    echo 0-7 > "$cs/top-app/cpus"
    echo 0-5 > "$cs/restricted/cpus"
    echo 0-7 > "$cs/camera-daemon/cpus"
    echo 0 > "$cs/memory_pressure_enabled"
    echo 0 > "$cs/sched_load_balance"
    echo 1 > "$cs/foreground/sched_load_balance"
done

# Disallow power saving mode for display
for dlp in /proc/displowpower/*; do
    [ -f "$dlp/hrt_lp" ] && echo 1 > "$dlp/hrt_lp"
    [ -f "$dlp/idlevfp" ] && echo 1 > "$dlp/idlevfp"
    [ -f "$dlp/idletime" ] && echo 100 > "$dlp/idletime"
done

echo 0 > /dev/cpuctl/foreground/cpu.uclamp.min
echo 0 > /dev/cpuctl/top-app/cpu.uclamp.min
echo 0 > /dev/cpuctl/pnpmgr_fg/cpu.uclamp.min

# Disable all kernel panic mechanisms
for param in hung_task_timeout_secs panic_on_oom panic_on_oops panic softlockup_panic; do
    zeshia "0" "/proc/sys/kernel/$param"
done

sync

# Set library names for scheduler optimization
zeshia "$lib" "/proc/sys/kernel/sched_lib_name"

FSTrim() {
    AZLog "Applying FSTrim"
    for mount in /system /vendor /data /cache /metadata /odm /system_ext /product; do
        if mountpoint -q "$mount"; then
            fstrim -v "$mount"
            AZLog "Trimmed: $mount"
        else
            AZLog "Skipped (not mounted): $mount"
        fi
    done
}

SFL() {
resetprop -n debug.sf.disable_backpressure 1
resetprop -n debug.sf.latch_unsignaled 1
resetprop -n debug.sf.enable_hwc_vds 1
resetprop -n debug.sf.early_phase_offset_ns 500000
resetprop -n debug.sf.early_app_phase_offset_ns 500000
resetprop -n debug.sf.early_gl_phase_offset_ns 3000000
resetprop -n debug.sf.early_gl_app_phase_offset_ns 15000000
resetprop -n debug.sf.high_fps_early_phase_offset_ns 6100000
resetprop -n debug.sf.high_fps_early_gl_phase_offset_ns 650000
resetprop -n debug.sf.high_fps_late_app_phase_offset_ns 100000
resetprop -n debug.sf.phase_offset_threshold_for_next_vsync_ns 6100000
resetprop -n debug.sf.showupdates 0 
resetprop -n debug.sf.showcpu 0 
resetprop -n debug.sf.showbackground 0 
resetprop -n debug.sf.showfps 0
resetprop -n debug.sf.hw 0
}

DThermal() {
    AZLog "Disabling Thermal Services..."

    thermal() {
        find /system/etc/init /vendor/etc/init /odm/etc/init -type f | xargs grep -h "^service" | awk '{print $2}' | grep thermal
    }

    propfile() {
        while read -r key value; do
            resetprop -n "$key" "$value"
            echo "[$(date)] Reset $key to $value"
        done <<EOF
debug.thermal.throttle.support no
ro.vendor.mtk_thermal_2_0 0
persist.thermal_config.mitigation 0
ro.mtk_thermal_monitor.enabled false
ro.vendor.tran.hbm.thermal.temp.clr 49000
ro.vendor.tran.hbm.thermal.temp.trig 46000
vendor.thermal.link_ready 0
dalvik.vm.dexopt.thermal-cutoff 0
persist.vendor.thermal.engine.enable 0
persist.vendor.thermal.config 0
EOF
    }

    propfile

    stop thermal_core
    stop vendor.thermal-hal-2-0.mtk
    AZLog "Stopped core thermal services"

    for svc in $(thermal); do
        stop "$svc"
        AZLog "Stopped thermal service: $svc"
    done

    for thermalpr in $(pgrep thermal); do
        kill -SIGSTOP "$thermalpr"
        AZLog "Froze thermal process: $thermalpr"
    done

    for thermalinit in $(getprop | awk -F '[][]' '/init\.svc_.*thermal/ {print $2}'); do
        [ -n "$thermalinit" ] && resetprop -n "$thermalinit" ""
        AZLog "Cleared thermal init: $thermalinit"
    done

    for kill in android.hardware.thermal-service.mediatek android.hardware.thermal@2.0-service.mtk; do
        getprop | grep -q "$kill" && stop "$kill"
        thermalhwsvc=$(pidof "$kill")
        [ -n "$thermalhwsvc" ] && kill -9 "$thermalhwsvc"
        AZLog "Stopped thermal binary: $kill"
    done

    for kill2 in /vendor/bin/hw/android.hardware.thermal-service.mediatek /vendor/bin/hw/android.hardware.thermal@2.0-service.mtk; do
        if [ -f "$kill2" ]; then
            mv "$kill2" "$kill2.bak"
            echo "" > "$kill2"
            chmod 000 "$kill2"
            AZLog "Disabled thermal binary: $kill2"
        fi
    done

    for thermalprop in $(getprop | grep thermal | cut -f1 -d] | cut -f2 -d[ | grep -F init.svc.); do
        resetprop "$thermalprop" stopped
        AZLog "Reset thermal property: $thermalprop"
    done

    if [ -d "/sys/class/thermal" ]; then
        chmod 644 /sys/class/thermal/thermal_zone*/mode
        for thermalzone in /sys/class/thermal/thermal_zone*/mode; do
            [ -f "$thermalzone" ] && echo "disabled" > "$thermalzone"
            AZLog "Disabled thermal zone: $thermalzone"
        done
    fi

    [ -d "/sys/devices/virtual/thermal" ] && find /sys/devices/virtual/thermal -type f -exec chmod 000 {} +
    AZLog "Disabled virtual thermal monitoring"

    cmd thermalservice override-status 0
    AZLog "Thermal service overridden"
}

kill_logd() {
    zeshia 0 /sys/kernel/ccci/debug
    zeshia 0 /sys/kernel/tracing/tracing_on        
    zeshia 0 /proc/sys/kernel/perf_event_paranoid
    zeshia 0 /proc/sys/kernel/debug_locks
    zeshia 0 /proc/sys/kernel/perf_cpu_time_max_percent
    zeshia off /proc/sys/kernel/printk_devkmsg    
}
    # List of logging services
    list_logger="
    logd
    traced
    statsd
    tcpdump
    cnss_diag
    subsystem_ramdump
    charge_logger
    wlan_logging
    "

    # Logd
    if [ -f /data/AZenith/logd ] && [ "$(cat /data/AZenith/logd)" -eq 1 ]; then
        for logger in $list_logger; do
            stop "$logger" 2>/dev/null
        done
    else
        for logger in $list_logger; do
            start "$logger" 2>/dev/null
        done
    fi
    
if [ -f /data/AZenith/logd ] && [ "$(cat /data/AZenith/logd)" -eq 1 ]; then
    kill_logd
fi
if [ -f /data/AZenith/DThermal ] && [ "$(cat /data/AZenith/DThermal)" -eq 1 ]; then
    DThermal
fi
if [ -f /data/AZenith/SFL ] && [ "$(cat /data/AZenith/SFL)" -eq 1 ]; then
    SFL
fi
if [ -f /data/AZenith/FSTrim ] && [ "$(cat /data/AZenith/FSTrim)" -eq 1 ]; then
    FSTrim
fi

AZLog  "AZenith Utility Completed."

exit 0
