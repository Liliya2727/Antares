#!/bin/sh

MODDIR=${0%/*}
logpath="/data/AZenith/AZenith.log"

AZLog() {
    if [ "$(cat /data/AZenith/logger 2>/dev/null)" = "1" ]; then
        local timestamp
        timestamp=$(date +'%Y-%m-%d %H:%M:%S')
        local message="$1"
        echo "$timestamp - $message" >> "$logpath"
        echo "$timestamp - $message"
    fi
}

zeshia() {
    if [ -f "$2" ]; then
        chmod 644 "$2" >/dev/null 2>&1
        echo "$1" >"$2" 2>/dev/null && AZLog "Set $2 to $1" || AZLog "Failed to set $2 to $1"
        chmod 444 "$2" >/dev/null 2>&1
    else
        AZLog "File $2 not found, skipping..."
    fi
}

# Define important variables
lib="UnityMain, libunity.so, libil2ccp.so, libmain.so"

# Save EEM values
for eem in EEM_DET_B EEM_DET_BL EEM_DET_L EEM_DET_CCI; do
    eem_path="/proc/eem/$eem/eem_offset"
    eem_save_path="/data/AZenith/default_$eem"

    if [ -f "$eem_path" ]; then
        eem_value=$(cat "$eem_path")
        echo "$eem_value" > "$eem_save_path"
        AZLog "Saved $eem value: $eem_value"
    else
        AZLog "$eem_path not found, skipping..."
    fi
done

# Save EEMG values
for eemg in EEMG_DET_GPU EEMG_DET_GPU_HI; do
    eemg_path="/proc/eemg/$eemg/eemg_offset"
    eemg_save_path="/data/AZenith/default_$eemg"

    if [ -f "$eemg_path" ]; then
        eemg_value=$(cat "$eemg_path")
        echo "$eemg_value" > "$eemg_save_path"
        AZLog "Saved $eemg value: $eemg_value"
    else
        AZLog "$eemg_path not found, skipping..." >> /data/AZenith/AZenith.log
    fi
done

# CPU Core Ctl Optimization with delay for stability
for cpu in 0 4 7; do
    zeshia "1" "/sys/devices/system/cpu/cpu$cpu/core_ctl/enable"
    sleep 0.1
    zeshia "10" "/sys/devices/system/cpu/cpu$cpu/core_ctl/offline_throttle_ms"
done

# **Schedhorizon Frequency Tuning**
AZLog "Applying Schedhorizon Frequency Tuning..."
zeshia "50 100 200 400 600" "/sys/devices/system/cpu/cpufreq/policy0/schedhorizon/up_delay"
zeshia "500000 850000 1250000 1450000 1800000" "/sys/devices/system/cpu/cpufreq/policy0/schedhorizon/efficient_freq"
zeshia "50 100 200 400 600 800" "/sys/devices/system/cpu/cpufreq/policy4/schedhorizon/up_delay"
zeshia "437000 902000 1162000 1451000 1740000 1985000" "/sys/devices/system/cpu/cpufreq/policy4/schedhorizon/efficient_freq"
zeshia "30 50 150 300 500 700" "/sys/devices/system/cpu/cpufreq/policy7/schedhorizon/up_delay"
zeshia "480000 1200000 1600000 1800000 2200000 2400000" "/sys/devices/system/cpu/cpufreq/policy7/schedhorizon/efficient_freq"

# Memory optimizations
zeshia 20 /proc/sys/vm/swappiness

# Block I/O optimizations with reduced redundant operations
for block in mmcblk0 mmcblk1 sda sdb sdc; do
    for param in add_random iostats nomerges rotational rq_affinity; do
        zeshia "0" "/sys/block/$block/queue/$param"
    done
    zeshia "64" "/sys/block/$block/queue/nr_requests"
    zeshia "128" "/sys/block/$block/queue/read_ahead_kb"
done

# Network settings with logging
zeshia "cubic" /proc/sys/net/ipv4/tcp_congestion_control
zeshia 1 /proc/sys/net/ipv4/tcp_low_latency

# CPU Stune Configuration
for stune in top-app foreground background; do
    zeshia "0" "/dev/stune/$stune/schedtune.prefer_idle"
    zeshia "0" "/dev/stune/$stune/schedtune.boost"
done

# Disable FPSGO for gaming boost
zeshia 0 /sys/kernel/fpsgo/common/fpsgo_enable

# Disable all kernel panic mechanisms
for param in hung_task_timeout_secs panic_on_oom panic_on_oops panic softlockup_panic; do
    zeshia "0" "/proc/sys/kernel/$param"
done

# Set library names for scheduler optimization
zeshia "$lib" "/proc/sys/kernel/sched_lib_name"


FSTrim() {
    AZLog "Applying FSTrim"
    for mount in /system /vendor /data /cache /metadata /odm /system_ext /product; do
        if mountpoint -q "$mount"; then
            fstrim -v "$mount"
            AZLog "Trimmed: $mount"
        else
            AZLog "Skipped (not mounted): $mount"
        fi
    done
}

SFL() {
    AZLog "Applying Surfaceflinger Latency"
    for prop in \
        "ro.surface_flinger.max_frame_buffer_acquired_buffers=5" \
        "debug.sf.early_phase_offset_ns=500000" \
        "debug.sf.early_app_phase_offset_ns=500000" \
        "debug.sf.early_gl_phase_offset_ns=1000000" \
        "debug.sf.early_gl_app_phase_offset_ns=1000000" \
        "debug.sf.high_fps_early_phase_offset_ns=1000000" \
        "debug.sf.high_fps_early_gl_phase_offset_ns=1000000" \
        "debug.sf.high_fps_late_app_phase_offset_ns=1000000" \
        "debug.sf.phase_offset_threshold_for_next_vsync_ns=1000000"; do
        resetprop -n $prop
        echo "[$(date)] Set $prop"
    done
}

DThermal() {
    AZLog "Disabling Thermal Services..."

    thermal() {
        find /system/etc/init /vendor/etc/init /odm/etc/init -type f 2>/dev/null | xargs grep -h "^service" | awk '{print $2}' | grep thermal
    }

    propfile() {
        while read -r key value; do
            resetprop -n "$key" "$value"
            echo "[$(date)] Reset $key to $value"
        done <<EOF
debug.thermal.throttle.support no
ro.vendor.mtk_thermal_2_0 0
persist.thermal_config.mitigation 0
ro.mtk_thermal_monitor.enabled false
ro.vendor.tran.hbm.thermal.temp.clr 49000
ro.vendor.tran.hbm.thermal.temp.trig 46000
vendor.thermal.link_ready 0
dalvik.vm.dexopt.thermal-cutoff 0
persist.vendor.thermal.engine.enable 0
persist.vendor.thermal.config 0
EOF
    }

    propfile

    stop thermal_core
    stop vendor.thermal-hal-2-0.mtk
    AZLog "Stopped core thermal services"

    for svc in $(thermal); do
        stop "$svc"
        AZLog "Stopped thermal service: $svc"
    done

    for thermalpr in $(pgrep thermal); do
        kill -SIGSTOP "$thermalpr"
        AZLog "Froze thermal process: $thermalpr"
    done

    for thermalinit in $(getprop | awk -F '[][]' '/init\.svc_.*thermal/ {print $2}'); do
        [ -n "$thermalinit" ] && resetprop -n "$thermalinit" ""
        AZLog "Cleared thermal init: $thermalinit"
    done

    for kill in android.hardware.thermal-service.mediatek android.hardware.thermal@2.0-service.mtk; do
        getprop | grep -q "$kill" && stop "$kill"
        thermalhwsvc=$(pidof "$kill")
        [ -n "$thermalhwsvc" ] && kill -9 "$thermalhwsvc"
        AZLog "Stopped thermal binary: $kill"
    done

    for kill2 in /vendor/bin/hw/android.hardware.thermal-service.mediatek /vendor/bin/hw/android.hardware.thermal@2.0-service.mtk; do
        if [ -f "$kill2" ]; then
            mv "$kill2" "$kill2.bak"
            echo "" > "$kill2"
            chmod 000 "$kill2"
            AZLog "Disabled thermal binary: $kill2"
        fi
    done

    for thermalprop in $(getprop | grep thermal | cut -f1 -d] | cut -f2 -d[ | grep -F init.svc.); do
        resetprop "$thermalprop" stopped
        AZLog "Reset thermal property: $thermalprop"
    done

    if [ -d "/sys/class/thermal" ]; then
        chmod 644 /sys/class/thermal/thermal_zone*/mode
        for thermalzone in /sys/class/thermal/thermal_zone*/mode; do
            [ -f "$thermalzone" ] && echo "disabled" > "$thermalzone"
            AZLog "Disabled thermal zone: $thermalzone"
        done
    fi

    [ -d "/sys/devices/virtual/thermal" ] && find /sys/devices/virtual/thermal -type f -exec chmod 000 {} +
    AZLog "Disabled virtual thermal monitoring"

    cmd thermalservice override-status 0
    AZLog "Thermal service overridden"
}

if [ -f /data/AZenith/DThermal ] && [ "$(cat /data/AZenith/DThermal)" -eq 1 ]; then
    DThermal
fi
if [ -f /data/AZenith/SFL ] && [ "$(cat /data/AZenith/SFL)" -eq 1 ]; then
    SFL
fi
if [ -f /data/AZenith/FSTrim ] && [ "$(cat /data/AZenith/FSTrim)" -eq 1 ]; then
    FSTrim
fi
if [ -f /data/AZenith/logd ] && [ "$(cat /data/AZenith/logd)" -eq 1 ]; then
    stop logd
    else
    start logd
fi

AZLog  "AZenith Utility Completed."